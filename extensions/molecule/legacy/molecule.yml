---
dependency:
  name: galaxy
  options:
    role-file: requirements.yml
    requirements-file: requirements.yml
driver:
  name: default
platforms:
  - name: monitoring-${MOLECULE_SCENARIO_NAME}-cluster-01
    image: "${MOLECULE_KVM_IMAGE}"
    cpu: 6
    mem: 16
    groups:
      - rke2_server
      - rke2_agent
      - monitoring_clients
  - name: monitoring-${MOLECULE_SCENARIO_NAME}-client-01
    image: "${MOLECULE_KVM_IMAGE}"
    cpu: 2
    mem: 4
    groups:
      - monitoring_clients
provisioner:
  name: ansible
  playbooks:
    create: ../common/create.yml
    prepare: ../common/prepare.yml
    converge: ../common/install.yml
    cleanup: ../common/cleanup.yml
    destroy: ../common/destroy.yml
    side_effect: ../common/uninstall.yml
    verify: ../common/verify.yml
  config_options:
    defaults:
      allow_broken_conditionals: true
      callbacks_enabled: ansible.posix.profile_tasks
      callback_whitelist: profile_tasks, timer, yaml
  inventory:
    hosts:
      all:
        vars:
          # Molecule params
          ansible_ssh_extra_args: "-o ControlPersist=no -o ControlPath=none"
          libvirt_user: molecule
          libvirt_address: "172.31.252.1/24"
          libvirt_platforms: "{{ molecule_yml.platforms }}"
          molecule_pool_private: "{{ libvirt_address | ansible.utils.ipsubnet(32, -2) }}"
          molecule_install_dir: "{{ lookup('ansible.builtin.env', 'MOLECULE_OUTPUT_DIR', default='/tmp/logs') }}"
          molecule_install_log: "{{ molecule_install_dir }}/${MOLECULE_SCENARIO_NAME}"
          molecule_local_kubeconfig: "{{ lookup('ansible.builtin.env', 'MOLECULE_EPHEMERAL_DIRECTORY') }}/.kubeconfig"
          # RKE2 params
          rke2_cluster_name: opensearch.pokerops.net
          rke2_ippool_private: "{{ molecule_pool_private }}"
          rke2_api_url: "https://api.{{ rke2_cluster_name }}:6443"
          rke2_token: "secret"
          # Monitoring params
          monitoring_heartbeat_conf_monitors:
            - type: http
              id: "google"
              name: "Google"
              schedule: "@every 10s"
              urls:
                - "https://www.google.com"
              check.response.status: 200
verifier:
  name: ansible
scenario:
  create_sequence:
    - dependency
    - create
  prepare_sequence:
    - prepare
  converge_sequence:
    - converge
  destroy_sequence:
    - destroy
  cleanup_sequence:
    - cleanup
  test_sequence:
    - dependency
    - create
    - prepare
    - converge
    - verify
    - cleanup
